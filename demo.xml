<?xml version="1.0" encoding="UTF-8" ?>
<collection xmlns:d="http://codevine.org/vty-ui-builder/xmlns/data/1.0"
            xmlns:w="http://codevine.org/vty-ui-builder/xmlns/widget/1.0"
            xmlns="http://codevine.org/vty-ui-builder/xmlns/core/1.0">
  <shared>
    <w:fText sharedId="shared">This is a shared text widget.</w:fText>
  </shared>

  <!-- Introduction -->
  <interface name="intro">
    <w:vBox>
      <w:fText>vty-ui-builder demo: Introduction</w:fText>
      <w:hBorder/>
      <w:wrap>
        <w:fText>
          This program will demonstrate the major features of the
          <d:attr fg="cyan">vty-ui-builder</d:attr> tool.  This program
          will take you through a series of interfaces which have been
          expressed in the vty-ui-builder input XML
          format.<d:br/><d:br/>The tool will generate a Haskell module
          with a default 'main' function which will set up key event
          handlers for each interface to allow you to evaluate each
          one as you are building your XML document.<d:br/><d:br/>Press
          the <d:attr fg="magenta">'n'</d:attr> key whenever you want to
          change to the next demonstration interface (or <d:attr
          fg="magenta">'p'</d:attr> to go to the previous one).  In
          interfaces with multiple interactive widgets, press <d:attr
          fg="magenta">Tab</d:attr> to cycle focus between them.
        </w:fText>
      </w:wrap>
    </w:vBox>
  </interface>

  <interface name="bordered">
    <w:vBox>
      <w:fText><d:attr fg="green">bordered</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:bordered>
        <w:fText>This text has an ASCII art border around it.</w:fText>
      </w:bordered>
      <w:hBox>
        <w:fText>Here is a vertical border:</w:fText>
        <w:vBorder/>
      </w:hBox>
      <w:vBox>
        <w:fText>Here is a horizontal border:</w:fText>
        <w:hBorder/>
      </w:vBox>
    </w:vBox>
  </interface>

  <interface name="button">
    <w:vBox id="button">
      <w:fText><d:attr fg="green">button</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:fText>Press <d:attr fg="yellow">TAB</d:attr> to switch focus from
      one button to the next.</w:fText>
      <w:hBox>
        <w:button id="b1" label="Button 1"/>
        <w:button id="b2" label="Button 2"/>
        <w:button id="b3" label="Button 3"/>
      </w:hBox>
    </w:vBox>
    <focusGroup>
      <entry name="b1"/>
      <entry name="b2"/>
      <entry name="b3"/>
    </focusGroup>
  </interface>

  <interface name="centered">
    <w:vBox>
      <w:fText><d:attr fg="green">centered</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:hBox>
        <w:hCentered>
          <w:fText>This text is horizontally centered <d:br/>using the <d:attr
          fg="green">hCentered</d:attr> tag.</w:fText>
        </w:hCentered>
        <w:vBorder/>
        <w:vCentered>
          <w:fText>This text is vertically centered <d:br/>using the <d:attr
          fg="green">vCentered</d:attr> tag.</w:fText>
        </w:vCentered>
      </w:hBox>
      <w:hBorder/>
      <w:centered>
        <w:fText>This text is both vertically and horizontally centered
        using the <d:attr fg="green">centered</d:attr> tag.</w:fText>
      </w:centered>
    </w:vBox>
  </interface>

  <interface name="checkbox">
    <w:vBox>
      <w:fText><d:attr fg="green">checkBox</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:wrap>
        <w:fText>Checkboxes can be toggled by pressing the spacebar.</w:fText>
      </w:wrap>
      <w:checkBox id="cb1" label="Breakfast"/>
      <w:checkBox id="cb2" label="Lunch"/>
      <w:checkBox id="cb3" label="Dinner"/>
      <w:wrap>
        <w:fText>
          Checkboxes can also be used as radio buttons by setting a
          <d:attr fg="magenta">radioGroup</d:attr> XML attribute to the
          name of a desired radio button group.
        </w:fText>
      </w:wrap>
      <w:checkBox id="cb4" label="Cake" radioGroup="rg1" />
      <w:checkBox id="cb5" label="Death" radioGroup="rg1" />
    </w:vBox>
    <focusGroup>
      <entry name="cb1"/>
      <entry name="cb2"/>
      <entry name="cb3"/>
      <entry name="cb4"/>
      <entry name="cb5"/>
    </focusGroup>
  </interface>

  <interface name="dialog">
    <w:vBox>
      <w:fText><d:attr fg="green">dialog</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:dialog id="dlg1" title="Testing Dialog">
        <w:wrap>
          <w:fText>This is the content of the dialog.  The dialog can
          have arbitrary content widgets (even interactive
          widgets).</w:fText>
        </w:wrap>
      </w:dialog>
    </w:vBox>
    <focusGroup>
      <entry name="dlg1"/>
    </focusGroup>
  </interface>

  <interface name="dirbrowser">
    <w:vBox>
      <w:fText><d:attr fg="green">dirBrowser</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:wrap>
        <w:fText>This is a directory browser widget.  Arrow keys can be
        used to select files or directories, and Enter will enter a
        directory.</w:fText>
      </w:wrap>
      <w:dirBrowser id="db1"/>
    </w:vBox>
    <focusGroup>
      <entry name="db1"/>
    </focusGroup>
  </interface>

  <interface name="edit">
    <w:vBox>
      <w:fText><d:attr fg="green">edit</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:wrap>
        <w:fText>This is an edit widget.  Edit widgets support
        relatively standard Emacs-style line-editing
        keystrokes.</w:fText>
      </w:wrap>
      <w:bordered>
        <w:edit id="e1"/>
      </w:bordered>
    </w:vBox>
    <focusGroup>
      <entry name="e1"/>
    </focusGroup>
  </interface>

  <interface name="fText">
    <w:vBox>
      <w:fText><d:attr fg="green">fText</d:attr> demo</w:fText>
      <w:hBorder/>

      <w:vBox>
        <w:fText>This is some <d:attr fg="cyan">cyan</d:attr> text.</w:fText>
        <w:wrap>
          <w:fText>
            This is some text which has been modified with the <d:attr
            fg="green">wrap</d:attr> formatter.  If your terminal is
            sufficiently narrow, this text will be wrapped
            automatically!  The <d:attr fg="red">attr</d:attr> tag can be
            used to apply <d:attr bg="green" fg="black">different
            attributes</d:attr> to <d:attr fg="yellow">text</d:attr>.  A
            <d:attr fg="magenta">'br'</d:attr> tag introduces a line
            break.
          </w:fText>
        </w:wrap>
      </w:vBox>
    </w:vBox>
  </interface>

  <interface name="hbox">
    <w:vBox>
      <w:fText><d:attr fg="green">hBox</d:attr> / <d:attr fg="green">hBox-sized</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:bordered>
        <w:hBox>
          <w:wrap>
            <w:fText>
              hBox elements can contain two or more elements.
            </w:fText>
          </w:wrap>
          <w:bordered>
            <w:wrap>
              <w:fText>
                They will be laid out horizontally.
              </w:fText>
            </w:wrap>
          </w:bordered>
        </w:hBox>
      </w:bordered>
      <w:bordered>
        <w:hBox spacing="2">
          <w:wrap>
            <w:fText>
              hBox elements can specify spacing between child widgets.
            </w:fText>
          </w:wrap>
          <w:wrap>
            <w:fText>
              Spacing for hBoxes is in columns.
            </w:fText>
          </w:wrap>
        </w:hBox>
      </w:bordered>
      <w:wrap>
        <w:fText>
          The <d:attr fg="green">hBox-sized</d:attr> tag is used to exert
          control over the size policy of box children.  This tag
          supports only two children.  Try resizing your terminal to
          see how these boxes behave.
        </w:fText>
      </w:wrap>
      <w:bordered>
        <w:hBox-sized first="20" second="30">
          <w:fText>20 columns</w:fText>
          <w:fText>30 columns</w:fText>
        </w:hBox-sized>
      </w:bordered>
      <w:bordered>
        <w:hBox-sized percent="25">
          <w:fText>25%</w:fText>
          <w:fText>75%</w:fText>
        </w:hBox-sized>
      </w:bordered>
    </w:vBox>
  </interface>

  <interface name="fills">
    <w:vBox>
      <w:fText><d:attr fg="green">hFill</d:attr> / <d:attr fg="green">vFill</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:bordered>
        <w:hBox>
          <w:fText>This is a horizontal fill,<d:br/>given a height and fill character:</w:fText>
          <w:hFill height="2" char="X"/>
        </w:hBox>
      </w:bordered>
      <w:bordered>
        <w:hBox>
          <w:fText>This is a vertical fill,<d:br/>given a fill character:</w:fText>
          <w:vFill char="X"/>
        </w:hBox>
      </w:bordered>
    </w:vBox>
  </interface>

  <interface name="limits">
    <w:vBox>
      <w:fText><d:attr fg="green">hLimit</d:attr> / <d:attr fg="green">vLimit</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:wrap>
        <w:fText>
          Widgets which ordinarily consume all available space can be
          constricted with a "limit" widget.  Limit widgets place an
          <d:attr fg="yellow">upper bound</d:attr> on the limited
          dimension of a widget.  To generate a limit widget, use
          <d:attr fg="magenta">vLimit</d:attr> (vertical limiting), <d:attr
          fg="magenta">hLimit</d:attr> (horizontal limiting), or <d:attr
          fg="magenta">boxLimit</d:attr> (both).
        </w:fText>
      </w:wrap>
      <w:vLimit height="5">
        <w:bordered>
          <w:vBox>
            <w:wrap>
              <w:fText>
                This bordered box is constrained to 5 rows in height
                (2 rows are used by the borders).  The amount required
                by the text will depend on the width of your terminal.
              </w:fText>
            </w:wrap>
            <w:vFill char=" "/>
          </w:vBox>
        </w:bordered>
      </w:vLimit>
      <w:hLimit width="30">
        <w:bordered>
          <w:hBox>
            <w:wrap>
              <w:fText>
                This bordered box is constrained to 30 columns in
                width (2 columns are used by the borders).
              </w:fText>
            </w:wrap>
            <w:hFill char=" " height="1"/>
          </w:hBox>
        </w:bordered>
      </w:hLimit>
      <w:boxLimit height="10" width="25">
        <w:bordered>
          <w:hBox>
            <w:wrap>
              <w:fText>
                This bordered box is constrained to 25 columns in
                width (2 columns are used by the borders) and 10 rows
                in height (2 rows are used by the borders).
              </w:fText>
            </w:wrap>
            <w:hFill char=" " height="1"/>
          </w:hBox>
        </w:bordered>
      </w:boxLimit>
    </w:vBox>
  </interface>

  <interface name="fixed">
    <w:vBox>
      <w:fText><d:attr fg="green">hFixed</d:attr> / <d:attr fg="green">vFixed</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:wrap>
        <w:fText>
          The size of a widget on the screen can be set to a specific
          value using a "fixed-size" widget.  Fixed-size widgets place
          a constraint on the dimension of a widget.  If the widget's
          actual size is less than the constraint, it is padded so
          that the space is always consumed.  To generate a fixed-size
          widget, use <d:attr fg="magenta">vFixed</d:attr> (vertical fixed
          size), <d:attr fg="magenta">hFixed</d:attr> (horizontal fixed
          size), or <d:attr fg="magenta">boxFixed</d:attr>
          (both).<d:br/><d:br/>Fixed-size widgets are similar to "limit"
          widgets but guarantee that the size of the fixed widget will
          always remain constant, whereas limit widgets guarantee only
          an upper bound on size.
        </w:fText>
      </w:wrap>
      <w:bordered>
        <w:vFixed height="5">
          <w:wrap>
            <w:fText>
              This text is set to 5 rows in height.
            </w:fText>
          </w:wrap>
        </w:vFixed>
      </w:bordered>
      <w:bordered>
        <w:hLimit width="30">
          <w:wrap>
            <w:fText>
              This text is set to 30 columns in width.
            </w:fText>
          </w:wrap>
        </w:hLimit>
      </w:bordered>
      <w:bordered>
        <w:boxFixed height="10" width="25">
          <w:wrap>
            <w:fText>
              This text is set to 25 columns in width (2 columns are
              used by the borders) and 10 rows in height (2 rows are
              used by the borders).
            </w:fText>
          </w:wrap>
        </w:boxFixed>
      </w:bordered>
    </w:vBox>
  </interface>

  <interface name="pad">
    <w:vBox>
      <w:fText><d:attr fg="green">pad</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:wrap>
        <w:fText id="padt1">
          Padding elements can specify one or more padding attributes
          to pad a child widget.  Multiple padding attribute values
          will be combined.
        </w:fText>
      </w:wrap>
      <w:hBox>
        <w:vBox>
          <w:bordered>
            <w:pad left="2">
              <w:fText>Padded on <d:attr fg="cyan">left</d:attr></w:fText>
            </w:pad>
          </w:bordered>
          <w:bordered>
            <w:pad right="2">
              <w:fText>Padded on <d:attr fg="cyan">right</d:attr></w:fText>
            </w:pad>
          </w:bordered>
          <w:bordered>
            <w:pad top="2">
              <w:fText>Padded on <d:attr fg="cyan">top</d:attr></w:fText>
            </w:pad>
          </w:bordered>
          <w:bordered>
            <w:pad bottom="2">
              <w:fText>Padded on <d:attr fg="cyan">bottom</d:attr></w:fText>
            </w:pad>
          </w:bordered>
        </w:vBox>
        <w:vBox>
          <w:bordered>
            <w:pad topBottom="2">
              <w:fText>Padded on top and bottom (<d:attr fg="cyan">topBottom</d:attr>)</w:fText>
            </w:pad>
          </w:bordered>
          <w:bordered>
            <w:pad leftRight="2">
              <w:fText>Padded on left and right (<d:attr fg="cyan">leftRight</d:attr>)</w:fText>
            </w:pad>
          </w:bordered>
          <w:bordered>
            <w:pad all="2">
              <w:fText>Padded on <d:attr fg="cyan">all</d:attr> sides</w:fText>
            </w:pad>
          </w:bordered>
        </w:vBox>
      </w:hBox>
    </w:vBox>
  </interface>

  <interface name="progressbar">
    <w:vBox>
      <w:fText><d:attr fg="green">progressBar</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:wrap>
        <w:fText>
          Progress bars use background colors to show progress and
          automatically scale as you resize your terminal.
        </w:fText>
      </w:wrap>
      <w:bordered>
        <w:vBox>
          <w:fText>Below is a progress bar at zero percent.</w:fText>
          <w:progressBar completeColor="blue" incompleteColor="white" />
        </w:vBox>
      </w:bordered>
      <w:bordered>
        <w:vBox>
          <w:fText>Below is a progress bar at 50 percent.</w:fText>
          <w:progressBar progress="50" completeColor="blue" incompleteColor="white" />
        </w:vBox>
      </w:bordered>
      <w:bordered>
        <w:vBox>
          <w:fText>Below is a progress bar at 75 percent.</w:fText>
          <w:progressBar progress="75" completeColor="blue" incompleteColor="white" />
        </w:vBox>
      </w:bordered>
    </w:vBox>
  </interface>

  <interface name="ref">
    <w:vBox>
      <w:fText><d:attr fg="green">ref</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:wrap>
        <w:fText>
          The 'ref' element makes it possible to reference an existing
          widget in more than one place in a document.  In particular,
          this can be used to share widgets between interfaces.
        </w:fText>
      </w:wrap>
      <w:bordered id="theWidget">
        <w:wrap>
          <w:fText>This box is the referenced widget, but it is only defined once in the document.</w:fText>
        </w:wrap>
      </w:bordered>
      <wref target="theWidget"/>
      <wref target="theWidget"/>
      <shref target="shared"/>
    </w:vBox>
  </interface>

  <interface name="stringlist">
    <w:vBox>
      <w:fText><d:attr fg="green">stringList</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:wrap>
        <w:fText>
          A <d:attr fg="magenta">stringList</d:attr> element generates a
          List widget with String as its key type and FormattedText as
          its widget type.  The XML attributes of the stringList
          element set the visual attributes of the list's cursor when
          the list does not have the focus.
        </w:fText>
      </w:wrap>
      <w:hBorder/>
      <w:bordered id="theList">
        <w:stringList cursorFg="black" cursorBg="yellow"/>
      </w:bordered>
      <w:wrap>
        <w:fText>
          If you want to generate a more general List widget, use the
          <d:attr fg="magenta">list</d:attr> tag instead, which allows you
          to specify the key and widget types for the list.  Below is
          such a list, although because it is generic on the types of
          its keys and widgets, we can't populate the list from the
          XML.  In practice, you would populate it from your
          application code.
        </w:fText>
      </w:wrap>
      <w:bordered>
        <w:list id="customList" cursorFg="black" cursorBg="yellow" keyType="Int" elemType="FormattedText" />
      </w:bordered>
    </w:vBox>
    <focusGroup>
      <entry name="theList" />
      <entry name="customList" />
    </focusGroup>
  </interface>

  <interface name="vbox">
    <w:vBox>
      <w:fText><d:attr fg="green">vBox</d:attr> / <d:attr fg="green">vBox-sized</d:attr> demo</w:fText>
      <w:hBorder/>
      <w:bordered>
        <w:vBox>
          <w:wrap>
            <w:fText>
              vBox elements can contain two or more elements.
            </w:fText>
          </w:wrap>
          <w:bordered>
            <w:wrap>
              <w:fText>
                They will be laid out vertically.
              </w:fText>
            </w:wrap>
          </w:bordered>
        </w:vBox>
      </w:bordered>
      <w:bordered>
        <w:vBox spacing="2">
          <w:wrap>
            <w:fText>
              vBox elements can specify spacing between child widgets.
            </w:fText>
          </w:wrap>
          <w:wrap>
            <w:fText>
              Spacing for vBoxes is in rows.
            </w:fText>
          </w:wrap>
        </w:vBox>
      </w:bordered>
      <w:wrap>
        <w:fText>
          The <d:attr fg="green">vBox-sized</d:attr> tag is used to exert
          control over the size policy of box children.  This tag
          supports only two children.  Try resizing your terminal to
          see how these boxes behave.
        </w:fText>
      </w:wrap>
      <w:bordered>
        <w:vBox-sized first="3" second="7">
          <w:fText>3 rows</w:fText>
          <w:fText>7 rows</w:fText>
        </w:vBox-sized>
      </w:bordered>
      <w:bordered>
        <w:vBox-sized percent="25">
          <w:fText>25%</w:fText>
          <w:fText>75%</w:fText>
        </w:vBox-sized>
      </w:bordered>
    </w:vBox>
  </interface>

  <interface name="table">
    <w:vBox>
      <w:fText><d:attr fg="green">table</d:attr> demo</w:fText>
      <w:hBorder/>

      <w:vBox spacing="1">
        <w:table>
          <d:columns>
            <d:column size="auto"/>
            <d:column size="auto"/>
          </d:columns>
          <d:row>
            <d:cell>
              <w:fText>Row 1, Cell 1 (auto width)</w:fText>
            </d:cell>
            <d:cell>
              <w:fText>Row 1, Cell 2 (auto width)</w:fText>
            </d:cell>
          </d:row>
          <d:row>
            <d:cell>
              <w:fText>Row 2, Cell 1 (auto width)</w:fText>
            </d:cell>
            <d:cell>
              <w:fText>Row 2, Cell 2 (auto width)</w:fText>
            </d:cell>
          </d:row>
        </w:table>

        <w:table>
          <d:columns>
            <d:column size="40"/>
            <d:column size="30"/>
          </d:columns>
          <d:row>
            <d:cell>
              <w:fText>Row 1, Cell 1 (fixed width)</w:fText>
            </d:cell>
            <d:cell>
              <w:fText>Row 1, Cell 2 (fixed width)</w:fText>
            </d:cell>
          </d:row>
          <d:row>
            <d:cell>
              <w:fText>Row 2, Cell 1 (fixed width)</w:fText>
            </d:cell>
            <d:cell>
              <w:fText>Row 2, Cell 2 (fixed width)</w:fText>
            </d:cell>
          </d:row>
        </w:table>

        <w:table borderStyle="rows">
          <d:columns>
            <d:column size="30"/>
          </d:columns>
          <d:row>
            <d:cell>
              <w:fText>Row borders only</w:fText>
            </d:cell>
          </d:row>
          <d:row>
            <d:cell>
              <w:fText>Row borders only</w:fText>
            </d:cell>
          </d:row>
        </w:table>

        <w:table borderStyle="columns">
          <d:columns>
            <d:column size="30"/>
            <d:column size="30"/>
          </d:columns>
          <d:row>
            <d:cell>
              <w:fText>Column borders only</w:fText>
            </d:cell>
            <d:cell>
              <w:fText>Column borders only</w:fText>
            </d:cell>
          </d:row>
        </w:table>

        <w:table borderStyle="edges">
          <d:columns>
            <d:column size="30"/>
          </d:columns>
          <d:row>
            <d:cell>
              <w:fText>Edge borders only</w:fText>
            </d:cell>
          </d:row>
          <d:row>
            <d:cell>
              <w:fText>Edge borders only</w:fText>
            </d:cell>
          </d:row>
        </w:table>

        <w:table borderStyle="columns,rows">
          <d:columns>
            <d:column size="30"/>
            <d:column size="30"/>
          </d:columns>
          <d:row>
            <d:cell>
              <w:fText>Column and row borders only</w:fText>
            </d:cell>
            <d:cell>
              <w:fText>Column and row borders only</w:fText>
            </d:cell>
          </d:row>
          <d:row>
            <d:cell>
              <w:fText>Column and row borders only</w:fText>
            </d:cell>
            <d:cell>
              <w:fText>Column and row borders only</w:fText>
            </d:cell>
          </d:row>
        </w:table>
      </w:vBox>

    </w:vBox>
  </interface>

</collection>
