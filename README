
vty-ui Builder
--------------

This package provides a utility which reads XML descriptions of
'vty-ui' interfaces and generates Haskell module source code to
generate the described interface.  The generated source includes a
function to build the interface and a record type used to hold
references to widgets of interest.  The XML files read by the tool are
validated against a collection of DTDs, each of which defines the DTD
for a single widget type.  In addition, the tool provides options to
inhibit the generation of various elements of the output source so
that the output can be used in various settings (module with only a
type declaration, test program with a built-in "main", etc.).

Usage: vty-ui-builder [options] <XML filename>

  -h           --help              This help output
  -n NAME      --module-name=NAME  The name of the generated module (default: "Interface")
  -d           --no-module-decl    Do not generate a module declaration or imports (only
                                   generate the module body)
  -t           --no-type           Do not generate the interface type used to return
                                   interface elements
  -f           --no-function       Do not generate the function which builds the interface
  -m           --main              Generate a "main" function for testing (implies
                                   -n "Main" and implicit exports)
  -o FILENAME  --output=FILENAME   The output filename (default: standard output)
  -v           --validate-only     Validate the input XML but do not generate any source
                                   code
  -l           --list              List the DTDs of the element types handled by this tool

Example generation of a Haskell module with a 'main' to use for
testing your interfaces:

  $ vty-ui-builder test.xml -m -o test.hs
  Output written to "test.hs"
  $ runghc test.hs

The generated 'main' will:

 * invoke the generated UI builder function to construct the
   interfaces

 * add a key event handler to each interface binding:
   - 'Esc' to application exit
   - 'n' to switch to the next interface in the sequence (depending on
     the interface ordering in the XML)
   - 'p' to switch to the previous interface in the sequence
     (depending on the interface ordering in the XML)

 * Run the vty-ui event loop with the interface collection

Running the Demonstration
-------------------------

To see a demonstration of the element types supported by
vty-ui-builder:

 * Get the latest source version of vty-ui from GitHub:
   https://github.com/jtdaugherty/vty-ui

 * Install vty-ui

 * Install vty-ui-builder

 * Run:

   $ vty-ui-builder demo.xml -o demo.hs -m
   $ runghc demo.hs

Extending vty-ui-builder
------------------------

If you want to extend vty-ui-builder to support your own element types:

 * Build your own tool using
   Graphics.Vty.Widgets.Builder.Tool.mkBuilderToolMain by passing it a
   list of ElementHandlers and the filesystem path where their element
   DTDs can be found

 * Write an ElementHandler for each element type you want to support.
   This entails:

   - (optionally) writing a validation routine (to be run in addition
     to DTD validation)

   - writing a source generation routine to generate Haskell source
     from the element's contents and its children (if any)

For examples of ElementHandler validation and source generation
routines, see Graphics.Vty.Widgets.Builder.Handlers.